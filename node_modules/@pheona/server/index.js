const http = require("http");
function httpServer() {
  this.getReqs = {};
  this.postReqs = {};
  this.fowUrlReqs = {};
  this.getReqs["404"] = function (req, res) {
    res.end(` <h1> "${req.url}" Url Not Found In This Server </h1>`);
    };
    this.postReqs["404"] = function (req, res) {
      res.end(`cannot post $ {
        req.url
      }`);
    };
  }
  (function () {
    this.get = function (url, func) {
      this.getReqs[url] = func;
    };
    this.post = function (url, func) {
      this.postReqs[url] = func;
    };
    this.fow = function (url , func) {
      this.fowUrlReqs[url] = func;
    }
    this.listen = function (port, func) {
      const server = http.createServer((req, res)=> {
        var url = req.url;
        if (req.method === "GET") {
          if (this.getReqs[url] !== undefined) {
            this.getReqs[url](req, res);
          } else {
            if (this.fowUrlReqs[url] !== undefined) {
              this.fowUrlReqs[url](req, res);
            } else {
              var obj = url.split("/");
              var match = false;
              for (let i = 0; i < obj.length; i++) {
                obj.pop();
                url = obj.join("/");
                if (this.fowUrlReqs[url] !== undefined) {
                  match = true;
                  break;
                }
              }
              if (match == false) {
                this.getReqs["404"](req, res)
              } else if (match == true) {
                this.fowUrlReqs[url](req, res)
              }
            }
          }
        } else if (req.method === "POST") {
          req.on("data", data=> {
            data = JSON.parse(data);
            if (this.postReqs[req.url] !== undefined) {
              this.postReqs[req.url](req, res, data);
            } else {
              this.postReqs["404"](req, res);
            }
          });
        }
      });
      server.listen(port, func);
    };
  }).call(httpServer.prototype);
  module.exports = httpServer;